{
  "api/Pleosoft.XdeltaSharp.AddressMode.html": {
    "href": "api/Pleosoft.XdeltaSharp.AddressMode.html",
    "title": "Enum AddressMode | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Enum AddressMode Namespace : Pleosoft.XdeltaSharp Assembly : Pleosoft.XdeltaSharp.dll Syntax public enum AddressMode Fields Name Description Here Invalid Near Same Self"
  },
  "api/Pleosoft.XdeltaSharp.Adler32.html": {
    "href": "api/Pleosoft.XdeltaSharp.Adler32.html",
    "title": "Class Adler32 | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Class Adler32 Adler-32 checksum algorithm. Inheritance Object Adler32 Namespace : Pleosoft.XdeltaSharp Assembly : Pleosoft.XdeltaSharp.dll Syntax public static class Adler32 Remarks For more information: https://en.wikipedia.org/wiki/Adler-32. Methods | Improve this Doc View Source Run(Stream, Int64, UInt32) Computes the checksum Adler-32 from a stream. Declaration public static uint Run(Stream stream, long length, uint start = 1U) Parameters Type Name Description Stream stream The stream to read data. It starts at the current position. Int64 length The amount of bytes to read from the stream for the checksum. UInt32 start The start value of the checksum. Returns Type Description UInt32 The Adler-32 checksum of the data."
  },
  "api/Pleosoft.XdeltaSharp.Cache.html": {
    "href": "api/Pleosoft.XdeltaSharp.Cache.html",
    "title": "Class Cache | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Class Cache Inheritance Object Cache Namespace : Pleosoft.XdeltaSharp Assembly : Pleosoft.XdeltaSharp.dll Syntax public class Cache Constructors | Improve this Doc View Source Cache(Byte, Byte) Declaration public Cache(byte nearSlots, byte sameSlots) Parameters Type Name Description Byte nearSlots Byte sameSlots Properties | Improve this Doc View Source NearSlots Declaration public byte NearSlots { get; } Property Value Type Description Byte | Improve this Doc View Source SameSlots Declaration public byte SameSlots { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetAddress(UInt32, Byte, VcdReader) Declaration public uint GetAddress(uint hereAddress, byte mode, VcdReader addressSection) Parameters Type Name Description UInt32 hereAddress Byte mode VcdReader addressSection Returns Type Description UInt32 | Improve this Doc View Source Initialize() Declaration public void Initialize()"
  },
  "api/Pleosoft.XdeltaSharp.CodeTable.html": {
    "href": "api/Pleosoft.XdeltaSharp.CodeTable.html",
    "title": "Class CodeTable | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Class CodeTable Inheritance Object CodeTable Namespace : Pleosoft.XdeltaSharp Assembly : Pleosoft.XdeltaSharp.dll Syntax public class CodeTable Constructors | Improve this Doc View Source CodeTable(Byte[], Byte, Byte) Declaration public CodeTable(byte[] table, byte nearSlots, byte sameSlots) Parameters Type Name Description Byte [] table Byte nearSlots Byte sameSlots Properties | Improve this Doc View Source Cache Declaration public Cache Cache { get; } Property Value Type Description Cache | Improve this Doc View Source Default Declaration public static CodeTable Default { get; } Property Value Type Description CodeTable Methods | Improve this Doc View Source GetInstructions(Int32, out Instruction, out Instruction) Declaration public void GetInstructions(int index, out Instruction inst1, out Instruction inst2) Parameters Type Name Description Int32 index Instruction inst1 Instruction inst2"
  },
  "api/Pleosoft.XdeltaSharp.Decoder.Decoder.html": {
    "href": "api/Pleosoft.XdeltaSharp.Decoder.Decoder.html",
    "title": "Class Decoder | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Class Decoder Inheritance Object Decoder Implements IDisposable Namespace : Pleosoft.XdeltaSharp.Decoder Assembly : Pleosoft.XdeltaSharp.dll Syntax public class Decoder : IDisposable Constructors | Improve this Doc View Source Decoder(Stream, Stream, Stream) Declaration public Decoder(Stream input, Stream patch, Stream output) Parameters Type Name Description Stream input Stream patch Stream output Properties | Improve this Doc View Source Header Declaration public Header Header { get; } Property Value Type Description Header | Improve this Doc View Source Input Declaration public Stream Input { get; } Property Value Type Description Stream | Improve this Doc View Source LastWindow Declaration public Window LastWindow { get; } Property Value Type Description Window | Improve this Doc View Source Output Declaration public Stream Output { get; } Property Value Type Description Stream | Improve this Doc View Source Patch Declaration public Stream Patch { get; } Property Value Type Description Stream Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Run() Declaration public void Run() Events | Improve this Doc View Source Finished Declaration public event FinishedHandler Finished Event Type Type Description FinishedHandler | Improve this Doc View Source ProgressChanged Declaration public event ProgressChangedHandler ProgressChanged Event Type Type Description ProgressChangedHandler Implements System.IDisposable"
  },
  "api/Pleosoft.XdeltaSharp.Decoder.html": {
    "href": "api/Pleosoft.XdeltaSharp.Decoder.html",
    "title": "Namespace Pleosoft.XdeltaSharp.Decoder | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Namespace Pleosoft.XdeltaSharp.Decoder Classes Decoder WindowDecoder"
  },
  "api/Pleosoft.XdeltaSharp.Decoder.WindowDecoder.html": {
    "href": "api/Pleosoft.XdeltaSharp.Decoder.WindowDecoder.html",
    "title": "Class WindowDecoder | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Class WindowDecoder Inheritance Object WindowDecoder Namespace : Pleosoft.XdeltaSharp.Decoder Assembly : Pleosoft.XdeltaSharp.dll Syntax public class WindowDecoder Constructors | Improve this Doc View Source WindowDecoder(Stream, Stream) Declaration public WindowDecoder(Stream input, Stream output) Parameters Type Name Description Stream input Stream output Methods | Improve this Doc View Source Decode(Window) Declaration public void Decode(Window window) Parameters Type Name Description Window window"
  },
  "api/Pleosoft.XdeltaSharp.FinishedHandler.html": {
    "href": "api/Pleosoft.XdeltaSharp.FinishedHandler.html",
    "title": "Delegate FinishedHandler | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Delegate FinishedHandler Namespace : Pleosoft.XdeltaSharp Assembly : Pleosoft.XdeltaSharp.dll Syntax public delegate void FinishedHandler();"
  },
  "api/Pleosoft.XdeltaSharp.html": {
    "href": "api/Pleosoft.XdeltaSharp.html",
    "title": "Namespace Pleosoft.XdeltaSharp | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Namespace Pleosoft.XdeltaSharp Classes Adler32 Adler-32 checksum algorithm. Cache CodeTable VcdReader Enums AddressMode Delegates FinishedHandler ProgressChangedHandler"
  },
  "api/Pleosoft.XdeltaSharp.ProgressChangedHandler.html": {
    "href": "api/Pleosoft.XdeltaSharp.ProgressChangedHandler.html",
    "title": "Delegate ProgressChangedHandler | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Delegate ProgressChangedHandler Namespace : Pleosoft.XdeltaSharp Assembly : Pleosoft.XdeltaSharp.dll Syntax public delegate void ProgressChangedHandler(double progress); Parameters Type Name Description Double progress"
  },
  "api/Pleosoft.XdeltaSharp.Vcdiff.Header.html": {
    "href": "api/Pleosoft.XdeltaSharp.Vcdiff.Header.html",
    "title": "Class Header | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Class Header Inheritance Object Header Namespace : Pleosoft.XdeltaSharp.Vcdiff Assembly : Pleosoft.XdeltaSharp.dll Syntax public class Header Properties | Improve this Doc View Source ApplicationData Declaration public string ApplicationData { get; set; } Property Value Type Description String | Improve this Doc View Source SecondaryCompressor Declaration public SecondaryCompressor SecondaryCompressor { get; set; } Property Value Type Description SecondaryCompressor"
  },
  "api/Pleosoft.XdeltaSharp.Vcdiff.html": {
    "href": "api/Pleosoft.XdeltaSharp.Vcdiff.html",
    "title": "Namespace Pleosoft.XdeltaSharp.Vcdiff | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Namespace Pleosoft.XdeltaSharp.Vcdiff Classes Header Window Enums SecondaryCompressor WindowCompressedFields WindowFields"
  },
  "api/Pleosoft.XdeltaSharp.Vcdiff.Instructions.Add.html": {
    "href": "api/Pleosoft.XdeltaSharp.Vcdiff.Instructions.Add.html",
    "title": "Class Add | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Class Add Inheritance Object Instruction Add Inherited Members Instruction.Type Instruction.Size Instruction.SizeInTable Instruction.Decode(Window, Stream, Stream) Namespace : Pleosoft.XdeltaSharp.Vcdiff.Instructions Assembly : Pleosoft.XdeltaSharp.dll Syntax public class Add : Instruction Constructors | Improve this Doc View Source Add(Byte) Declaration public Add(byte sizeInTable) Parameters Type Name Description Byte sizeInTable Properties | Improve this Doc View Source Data Declaration public byte[] Data { get; } Property Value Type Description Byte [] Methods | Improve this Doc View Source DecodeInstruction(Window, Stream, Stream) Declaration public override void DecodeInstruction(Window window, Stream input, Stream output) Parameters Type Name Description Window window Stream input Stream output Overrides Instruction.DecodeInstruction(Window, Stream, Stream) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Pleosoft.XdeltaSharp.Vcdiff.Instructions.Copy.html": {
    "href": "api/Pleosoft.XdeltaSharp.Vcdiff.Instructions.Copy.html",
    "title": "Class Copy | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Class Copy Inheritance Object Instruction Copy Inherited Members Instruction.Type Instruction.Size Instruction.SizeInTable Instruction.Decode(Window, Stream, Stream) Namespace : Pleosoft.XdeltaSharp.Vcdiff.Instructions Assembly : Pleosoft.XdeltaSharp.dll Syntax public class Copy : Instruction Constructors | Improve this Doc View Source Copy(Byte, Byte, Cache) Declaration public Copy(byte sizeInTable, byte mode, Cache cache) Parameters Type Name Description Byte sizeInTable Byte mode Cache cache Properties | Improve this Doc View Source Address Declaration public uint Address { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source DecodeInstruction(Window, Stream, Stream) Declaration public override void DecodeInstruction(Window window, Stream input, Stream output) Parameters Type Name Description Window window Stream input Stream output Overrides Instruction.DecodeInstruction(Window, Stream, Stream) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Pleosoft.XdeltaSharp.Vcdiff.Instructions.html": {
    "href": "api/Pleosoft.XdeltaSharp.Vcdiff.Instructions.html",
    "title": "Namespace Pleosoft.XdeltaSharp.Vcdiff.Instructions | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Namespace Pleosoft.XdeltaSharp.Vcdiff.Instructions Classes Add Copy Instruction Noop Run Enums InstructionType"
  },
  "api/Pleosoft.XdeltaSharp.Vcdiff.Instructions.Instruction.html": {
    "href": "api/Pleosoft.XdeltaSharp.Vcdiff.Instructions.Instruction.html",
    "title": "Class Instruction | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Class Instruction Inheritance Object Instruction Add Copy Noop Run Namespace : Pleosoft.XdeltaSharp.Vcdiff.Instructions Assembly : Pleosoft.XdeltaSharp.dll Syntax public abstract class Instruction Constructors | Improve this Doc View Source Instruction(Byte, InstructionType) Declaration protected Instruction(byte sizeInTable, InstructionType type) Parameters Type Name Description Byte sizeInTable InstructionType type Properties | Improve this Doc View Source Size Declaration public uint Size { get; } Property Value Type Description UInt32 | Improve this Doc View Source SizeInTable Declaration protected byte SizeInTable { get; } Property Value Type Description Byte | Improve this Doc View Source Type Declaration public InstructionType Type { get; } Property Value Type Description InstructionType Methods | Improve this Doc View Source Decode(Window, Stream, Stream) Declaration public void Decode(Window window, Stream input, Stream output) Parameters Type Name Description Window window Stream input Stream output | Improve this Doc View Source DecodeInstruction(Window, Stream, Stream) Declaration public abstract void DecodeInstruction(Window window, Stream input, Stream output) Parameters Type Name Description Window window Stream input Stream output"
  },
  "api/Pleosoft.XdeltaSharp.Vcdiff.Instructions.InstructionType.html": {
    "href": "api/Pleosoft.XdeltaSharp.Vcdiff.Instructions.InstructionType.html",
    "title": "Enum InstructionType | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Enum InstructionType Namespace : Pleosoft.XdeltaSharp.Vcdiff.Instructions Assembly : Pleosoft.XdeltaSharp.dll Syntax public enum InstructionType : byte Fields Name Description Add Copy Noop Run"
  },
  "api/Pleosoft.XdeltaSharp.Vcdiff.Instructions.Noop.html": {
    "href": "api/Pleosoft.XdeltaSharp.Vcdiff.Instructions.Noop.html",
    "title": "Class Noop | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Class Noop Inheritance Object Instruction Noop Inherited Members Instruction.Type Instruction.Size Instruction.SizeInTable Instruction.Decode(Window, Stream, Stream) Namespace : Pleosoft.XdeltaSharp.Vcdiff.Instructions Assembly : Pleosoft.XdeltaSharp.dll Syntax public class Noop : Instruction Constructors | Improve this Doc View Source Noop() Declaration public Noop() Methods | Improve this Doc View Source DecodeInstruction(Window, Stream, Stream) Declaration public override void DecodeInstruction(Window window, Stream input, Stream output) Parameters Type Name Description Window window Stream input Stream output Overrides Instruction.DecodeInstruction(Window, Stream, Stream) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Pleosoft.XdeltaSharp.Vcdiff.Instructions.Run.html": {
    "href": "api/Pleosoft.XdeltaSharp.Vcdiff.Instructions.Run.html",
    "title": "Class Run | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Class Run Inheritance Object Instruction Run Inherited Members Instruction.Type Instruction.Size Instruction.SizeInTable Instruction.Decode(Window, Stream, Stream) Namespace : Pleosoft.XdeltaSharp.Vcdiff.Instructions Assembly : Pleosoft.XdeltaSharp.dll Syntax public class Run : Instruction Constructors | Improve this Doc View Source Run(Byte) Declaration public Run(byte sizeInTable) Parameters Type Name Description Byte sizeInTable Properties | Improve this Doc View Source Data Declaration public byte Data { get; } Property Value Type Description Byte Methods | Improve this Doc View Source DecodeInstruction(Window, Stream, Stream) Declaration public override void DecodeInstruction(Window window, Stream input, Stream output) Parameters Type Name Description Window window Stream input Stream output Overrides Instruction.DecodeInstruction(Window, Stream, Stream) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Pleosoft.XdeltaSharp.Vcdiff.SecondaryCompressor.html": {
    "href": "api/Pleosoft.XdeltaSharp.Vcdiff.SecondaryCompressor.html",
    "title": "Enum SecondaryCompressor | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Enum SecondaryCompressor Namespace : Pleosoft.XdeltaSharp.Vcdiff Assembly : Pleosoft.XdeltaSharp.dll Syntax public enum SecondaryCompressor : byte Fields Name Description Djw Fgk Lzma None"
  },
  "api/Pleosoft.XdeltaSharp.Vcdiff.Window.html": {
    "href": "api/Pleosoft.XdeltaSharp.Vcdiff.Window.html",
    "title": "Class Window | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Class Window Inheritance Object Window Namespace : Pleosoft.XdeltaSharp.Vcdiff Assembly : Pleosoft.XdeltaSharp.dll Syntax public class Window Properties | Improve this Doc View Source Addresses Declaration public VcdReader Addresses { get; set; } Property Value Type Description VcdReader | Improve this Doc View Source Checksum Declaration public uint Checksum { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source CompressedFields Declaration public WindowCompressedFields CompressedFields { get; set; } Property Value Type Description WindowCompressedFields | Improve this Doc View Source Data Declaration public VcdReader Data { get; set; } Property Value Type Description VcdReader | Improve this Doc View Source Instructions Declaration public VcdReader Instructions { get; set; } Property Value Type Description VcdReader | Improve this Doc View Source Source Declaration public WindowFields Source { get; set; } Property Value Type Description WindowFields | Improve this Doc View Source SourceSegmentLength Declaration public uint SourceSegmentLength { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source SourceSegmentOffset Declaration public uint SourceSegmentOffset { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source TargetWindowLength Declaration public uint TargetWindowLength { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source TargetWindowOffset Declaration public uint TargetWindowOffset { get; set; } Property Value Type Description UInt32"
  },
  "api/Pleosoft.XdeltaSharp.Vcdiff.WindowCompressedFields.html": {
    "href": "api/Pleosoft.XdeltaSharp.Vcdiff.WindowCompressedFields.html",
    "title": "Enum WindowCompressedFields | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Enum WindowCompressedFields Namespace : Pleosoft.XdeltaSharp.Vcdiff Assembly : Pleosoft.XdeltaSharp.dll Syntax [Flags] public enum WindowCompressedFields : byte Fields Name Description Addresses All Data Instructions None"
  },
  "api/Pleosoft.XdeltaSharp.Vcdiff.WindowFields.html": {
    "href": "api/Pleosoft.XdeltaSharp.Vcdiff.WindowFields.html",
    "title": "Enum WindowFields | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Enum WindowFields Namespace : Pleosoft.XdeltaSharp.Vcdiff Assembly : Pleosoft.XdeltaSharp.dll Syntax [Flags] public enum WindowFields : byte Fields Name Description Adler32 All Source Target"
  },
  "api/Pleosoft.XdeltaSharp.VcdReader.html": {
    "href": "api/Pleosoft.XdeltaSharp.VcdReader.html",
    "title": "Class VcdReader | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Class VcdReader Inheritance Object VcdReader Namespace : Pleosoft.XdeltaSharp Assembly : Pleosoft.XdeltaSharp.dll Syntax public class VcdReader Constructors | Improve this Doc View Source VcdReader(Stream) Declaration public VcdReader(Stream stream) Parameters Type Name Description Stream stream Properties | Improve this Doc View Source BaseStream Declaration public Stream BaseStream { get; } Property Value Type Description Stream | Improve this Doc View Source Eof Declaration public bool Eof { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ReadByte() Declaration public byte ReadByte() Returns Type Description Byte | Improve this Doc View Source ReadBytes(Int32) Declaration public byte[] ReadBytes(int count) Parameters Type Name Description Int32 count Returns Type Description Byte [] | Improve this Doc View Source ReadBytes(UInt32) Declaration public byte[] ReadBytes(uint count) Parameters Type Name Description UInt32 count Returns Type Description Byte [] | Improve this Doc View Source ReadInteger() Declaration public uint ReadInteger() Returns Type Description UInt32"
  },
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contributing to the project | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Contributing to the project Thanks for taking the time to contribute! ✨ In this document you will find all the information you need to make sure the project continues to be the high-quality product we want to be! Reporting issues Issues When reporting a problem, be as specific as possible. Ideally, you should provide an small snippet of code that reproduces the issue. Try to provide also the following information: OS: Linux / Windows / Mac OS Runtime: .NET Framework, Mono, .NET Core Version of the product Stacktrace if any What's happening and what you expect to happen Features If you want to ask for a new feature, first make sure it hasn't been reported yet by using the search box in the issue tab. Make sure that the feature aligns with the direction of the project. Pull Request Before starting a pull request, create an issue requesting the feature you would like to see and implement. If you are fixing a bug, create also an issue to be able to track the problem. State that you would like to work on that. The team will reply to the issue as soon as possible, discussing the proposal if needed. This guarantee that later on the Pull Request we don't reject the proposal without having a discussion first and we don't waste time. In general, the process to create a pull request is: Create an issue describing the bug or feature and state you would like to work on that. The team will cheer you and/or discuss with you the issue. Fork the project. Clone your forked project and create a git branch. Make the necessary code changes in as many commits as you want. The commit message should follow this convention: :emoji: Short description #IssueID Long description if needed. Create a pull request. After reviewing your changes and making any new commits if needed, the team will approve and merge it. For a complete list of emoji description see this repository . Code Guidelines We follow the following standard guidelines with custom changes: Mono Code Guidelines . Microsoft Framework Design Guidelines Microsoft C# Coding Convetions . As the mono team says : It is more important to be correct than to be fast. It is more important to be maintainable than to be fast. Fast code that is difficult to maintain is likely going to be looked down upon. And don't miss The Zen of Python : Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! Quality We focus on code-quality to make ours and others life easier. For that reason: ✔️ DO write documentation for any public type and field. ✔️ DO write a test for all the possible code branches of your methods. Use a TDD approach. ✔️ DO seek for 100% test coverage. ✔️ DO seek for compiler warning free code. ✔️ DO check the code with StyleCop for style issues. ✔️ DO check the code with Gendarme for design issues. ✔️ DO review the results of SonarQube in the Pull Request. ✔️ DO make sure the CI pass. Style Guidelines Indentation ✔️ DO use spaces with an indentation level of 4 spaces. ❌ DO NOT use tabs. New lines ✔️ DO use Unix new lines: \\n instead of Windows style \\r\\n . In general, Git will handle that for you. ✔️ DO make sure there is an empty line at the end of the file. This ensure the latest line ends with the new line character and adding new lines after it won't show that line as changed in the diff. Line length ✔️ DO use a limit of 80 columns. If you need to wrap, move to the next line with one extra indentation level. ✔️ DO put all the arguments in a new line if they don't fit. ✔️ DO use local variables to make small conditions. void Method( int a, string b, int c) { OtherMethod( a, b, c); bool z = (a > 3) && (a < 5); bool w = b.StartsWith(\"hello\"); if (z && w) { Code(); } } Layout ✔️ DO define a type (class / struct / enum) per file. ✔️ DO separate methods and properties with new lines. ✔️ DO place the elements in this order: private fields, constructors, properties, methods, nested types. Place first static fields and order by visibility: public, protected, private. Spacing rules ❌ DO NOT leave any trailing spaces. ❌ DO NOT use space before opening parenthesis calling methods or indexers, between the parenthesis and the arguments or between the generic types. Method ( a ); array [ 10 ]; var list = new List <int> (); ✔️ DO use the following convention: Method(a); array[10]; var list = new List<int>(); ✔️ DO use spaces and parenthesis for clarity in math operations: int b = (a + (5 * 2)) / (3 + 3); ✔️ DO indent case statements: switch (a) { case 3: c = \"hello\"; break; case 5: c = \"world\"; break; default: throw new Exception(); } Brace position ✔️ DO put the opening brace on the same line for conditions, loops and try-catch. if (a) { Code(); Code(); } else if (b) { Code(); } else { Code(); } try { Something(); } catch (ArgumentNullException ex) { Something(); } finally { Something(); } for (int i = 0; i < 2; i++) { Something(); } ✔️ DO use braces for one line conditions and loops. This improves readability and avoid having changed lines just to add the brace when it requires extra logic. The exception is for one line conditions for argument checking. if (a) { Code(); } ✔️ DO put the brace in a new line when defining the namespace, a type or a method. namespace Program.Text { public class Abc { public void MyMethod() { } } } ✔️ DO put the brace in the same line for properties and indexers. public int Property { get { return value; } } ✔️ DO put each brace on a new line for empty methods. void EmptyMethod() { } Multiline comments ✔️ DO use always double slash comments. // Blah // Blah again // and another Blah Properties ❌ DO NOT use public variables under any circumstance. ✔️ DO use static properties for constants. ✔️ DO put the getter and setter in a new line for automatic or one line properties. public int Property { get { return value; } set { x = value; } } public int Text { get; private set; } File headers ✔️ DO put the license in the file header with this format: // // <FileName>.cs // // Author: // <AuthorName> <email@example.com> // // Copyright (c) <Year> <AuthorName> // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE. Naming ✔️ DO use always camel casing. void Method(string myArgument) class MyClass { string myString; int veryImportantValue; } ❌ DO NOT use m_ or _ as prefixes for private instance members. The private visibility was created for that, really. Keyword this ❌ DO NOT use this if it's not needed. ✔️ DO use this if the method has an argument with the same name. class Foo { int bar; public Foo(int bar) { this.bar = bar; } void Update(int newValue) { bar = newValue; Method(); } public void Method() { } } Keyword var ✔️ DO use the var on the left-hand side of an assignment when the type name is repeated on the right hand side: var monkeyUUID = new NSUuid(uuid); NSUuid something = RetrieveUUID(); Initializing instances ✔️ DO use the C# syntax to initialize instances. var x = new Foo { Label = \"This\", Color = Color.Red }; string[] array = { \"a\", \"b\", \"c\" }; var array2 = new string[] { \"d\", \"e\", \"f\" }; var list = new List<string> { \"hello\", \"world\" }; var dict = new Dictionary<string, int> { { \"hello\": 0 }, { \"world\": 1 } }; Redundant visibility ❌ DO NOT use the private keyword to indicate internal fields since it's already the default visibility. Usings ✔️ DO put the using inside the namespace. ✔️ DO include all the namespaces you are using. ✔️ DO use the using statement for IDisposable types. Built-in types ✔️ DO use the built-in type alias instead of the class names. int a = 5; long b = 5; string c = \"hello\"; string d = int.Parse(\"5\"); Integers ✔️ DO try to avoid unsigned integers in public method arguments and properties. Some .NET language doesn't support them. Strings ✔️ DO use the new string interpolation: int a = 5; string b = $\"The result is {a}\"; ✔️ DO use the StringBuilder class when creating strings with many operations."
  },
  "dev/Changelog.html": {
    "href": "dev/Changelog.html",
    "title": "vNext (December 29, 2020) | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "vNext (December 29, 2020) As part of this release we had 4 issues closed. breaking #7 Change namespaces to Pleosoft.XdeltaSharp and warning cleaning bug #9 Fix throwing exception when win_indicator is zero enhancements #3 Implement PleOps.Cake build system and rename project #8 Validate API with .NET 6 and update build system"
  },
  "guides/Contributing.html": {
    "href": "guides/Contributing.html",
    "title": "Contributing to the project | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Contributing to the project Thanks for taking the time to contribute! ✨ In this document you will find all the information you need to make sure the project continues to be the high-quality product we want to be! Reporting issues Issues When reporting a problem, be as specific as possible. Ideally, you should provide an small snippet of code that reproduces the issue. Try to provide also the following information: OS: Linux / Windows / Mac OS Runtime: .NET Framework, Mono, .NET Core Version of the product Stacktrace if any What's happening and what you expect to happen Features If you want to ask for a new feature, first make sure it hasn't been reported yet by using the search box in the issue tab. Make sure that the feature aligns with the direction of the project. Pull Request Before starting a pull request, create an issue requesting the feature you would like to see and implement. If you are fixing a bug, create also an issue to be able to track the problem. State that you would like to work on that. The team will reply to the issue as soon as possible, discussing the proposal if needed. This guarantee that later on the Pull Request we don't reject the proposal without having a discussion first and we don't waste time. In general, the process to create a pull request is: Create an issue describing the bug or feature and state you would like to work on that. The team will cheer you and/or discuss with you the issue. Fork the project. Clone your forked project and create a git branch. Make the necessary code changes in as many commits as you want. The commit message should follow this convention: :emoji: Short description #IssueID Long description if needed. Create a pull request. After reviewing your changes and making any new commits if needed, the team will approve and merge it. For a complete list of emoji description see this repository . Code Guidelines We follow the following standard guidelines with custom changes: Mono Code Guidelines . Microsoft Framework Design Guidelines Microsoft C# Coding Convetions . As the mono team says : It is more important to be correct than to be fast. It is more important to be maintainable than to be fast. Fast code that is difficult to maintain is likely going to be looked down upon. And don't miss The Zen of Python : Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! Quality We focus on code-quality to make ours and others life easier. For that reason: ✔️ DO write documentation for any public type and field. ✔️ DO write a test for all the possible code branches of your methods. Use a TDD approach. ✔️ DO seek for 100% test coverage. ✔️ DO seek for compiler warning free code. ✔️ DO check the code with StyleCop for style issues. ✔️ DO check the code with Gendarme for design issues. ✔️ DO review the results of SonarQube in the Pull Request. ✔️ DO make sure the CI pass. Style Guidelines Indentation ✔️ DO use spaces with an indentation level of 4 spaces. ❌ DO NOT use tabs. New lines ✔️ DO use Unix new lines: \\n instead of Windows style \\r\\n . In general, Git will handle that for you. ✔️ DO make sure there is an empty line at the end of the file. This ensure the latest line ends with the new line character and adding new lines after it won't show that line as changed in the diff. Line length ✔️ DO use a limit of 80 columns. If you need to wrap, move to the next line with one extra indentation level. ✔️ DO put all the arguments in a new line if they don't fit. ✔️ DO use local variables to make small conditions. void Method( int a, string b, int c) { OtherMethod( a, b, c); bool z = (a > 3) && (a < 5); bool w = b.StartsWith(\"hello\"); if (z && w) { Code(); } } Layout ✔️ DO define a type (class / struct / enum) per file. ✔️ DO separate methods and properties with new lines. ✔️ DO place the elements in this order: private fields, constructors, properties, methods, nested types. Place first static fields and order by visibility: public, protected, private. Spacing rules ❌ DO NOT leave any trailing spaces. ❌ DO NOT use space before opening parenthesis calling methods or indexers, between the parenthesis and the arguments or between the generic types. Method ( a ); array [ 10 ]; var list = new List <int> (); ✔️ DO use the following convention: Method(a); array[10]; var list = new List<int>(); ✔️ DO use spaces and parenthesis for clarity in math operations: int b = (a + (5 * 2)) / (3 + 3); ✔️ DO indent case statements: switch (a) { case 3: c = \"hello\"; break; case 5: c = \"world\"; break; default: throw new Exception(); } Brace position ✔️ DO put the opening brace on the same line for conditions, loops and try-catch. if (a) { Code(); Code(); } else if (b) { Code(); } else { Code(); } try { Something(); } catch (ArgumentNullException ex) { Something(); } finally { Something(); } for (int i = 0; i < 2; i++) { Something(); } ✔️ DO use braces for one line conditions and loops. This improves readability and avoid having changed lines just to add the brace when it requires extra logic. The exception is for one line conditions for argument checking. if (a) { Code(); } ✔️ DO put the brace in a new line when defining the namespace, a type or a method. namespace Program.Text { public class Abc { public void MyMethod() { } } } ✔️ DO put the brace in the same line for properties and indexers. public int Property { get { return value; } } ✔️ DO put each brace on a new line for empty methods. void EmptyMethod() { } Multiline comments ✔️ DO use always double slash comments. // Blah // Blah again // and another Blah Properties ❌ DO NOT use public variables under any circumstance. ✔️ DO use static properties for constants. ✔️ DO put the getter and setter in a new line for automatic or one line properties. public int Property { get { return value; } set { x = value; } } public int Text { get; private set; } File headers ✔️ DO put the license in the file header with this format: // // <FileName>.cs // // Author: // <AuthorName> <email@example.com> // // Copyright (c) <Year> <AuthorName> // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE. Naming ✔️ DO use always camel casing. void Method(string myArgument) class MyClass { string myString; int veryImportantValue; } ❌ DO NOT use m_ or _ as prefixes for private instance members. The private visibility was created for that, really. Keyword this ❌ DO NOT use this if it's not needed. ✔️ DO use this if the method has an argument with the same name. class Foo { int bar; public Foo(int bar) { this.bar = bar; } void Update(int newValue) { bar = newValue; Method(); } public void Method() { } } Keyword var ✔️ DO use the var on the left-hand side of an assignment when the type name is repeated on the right hand side: var monkeyUUID = new NSUuid(uuid); NSUuid something = RetrieveUUID(); Initializing instances ✔️ DO use the C# syntax to initialize instances. var x = new Foo { Label = \"This\", Color = Color.Red }; string[] array = { \"a\", \"b\", \"c\" }; var array2 = new string[] { \"d\", \"e\", \"f\" }; var list = new List<string> { \"hello\", \"world\" }; var dict = new Dictionary<string, int> { { \"hello\": 0 }, { \"world\": 1 } }; Redundant visibility ❌ DO NOT use the private keyword to indicate internal fields since it's already the default visibility. Usings ✔️ DO put the using inside the namespace. ✔️ DO include all the namespaces you are using. ✔️ DO use the using statement for IDisposable types. Built-in types ✔️ DO use the built-in type alias instead of the class names. int a = 5; long b = 5; string c = \"hello\"; string d = int.Parse(\"5\"); Integers ✔️ DO try to avoid unsigned integers in public method arguments and properties. Some .NET language doesn't support them. Strings ✔️ DO use the new string interpolation: int a = 5; string b = $\"The result is {a}\"; ✔️ DO use the StringBuilder class when creating strings with many operations."
  },
  "index.html": {
    "href": "index.html",
    "title": "Pleosoft.XdeltaSharp | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Pleosoft.XdeltaSharp NOTE: At this stage, this projects can only decompress patch files. It cannot generate / compress. Pleosoft.XdeltaSharp offers the possibility to apply delta/patch files with format VCDIFF , as described in the RFC 3284 . This project offers a library and a console application written in pure C# (no calls to C libraries). Making it compatible in every OS that can run a .NET runtime that implements .NET Standard 2.0 (.NET Framework, Mono and .NET). <!-- prettier-ignore --> Release Package Stable Preview Azure Artifacts The project takes the name from xdelta . Another compression tool in C by Joshua MacDonald that implements the algorithm VCDIFF. It started as a port but due to huge difference between C and C#, dropped and restarted the development just by reading the specification. Limitations The latest version does not support: Generate patch files. Patch files with external compression. Examples Apply a patch file using var input = new FileStream(inputFile, FileMode.Open); using var patch = new FileStream(patchFile, FileMode.Open); using var output = new FileStream(outputFile, FileMode.Create); using var decoder = new Decoder(input, patch, output); decoder.ProgressChanged += progress => Console.WriteLine($\"Patching progress: {progress}\"; decoder.Run(); Documentation Feel free to ask any question in the project Discussion site! Check our on-line API documentation . Build The project requires to build .NET 6.0 SDK and .NET Framework 4.8 or latest Mono. If you open the project with VS Code and you did install the VS Code Remote Containers extension, you can have an already pre-configured development environment with Docker or Podman. To build, test and generate artifacts run: # Only required the first time dotnet tool restore # Default target is Stage-Artifacts dotnet cake To just build and test quickly, run: dotnet cake --target=BuildTest License This software is license under the MIT license. Although not used, originally the project was inspired in xdelta with license Apache 2.0 . The algorithm for the ADLER32 checksum was ported from the C version of zlib with the following license: Copyright (C) 1995-2013 Jean-loup Gailly and Mark Adler This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software. Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions: 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required. 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. 3. This notice may not be removed or altered from any source distribution. Jean-loup Gailly Mark Adler jloup@gzip.org madler@alumni.caltech.edu The data format used by the zlib library is described by RFCs (Request for Comments) 1950 to 1952 in the files http://tools.ietf.org/html/rfc1950 (zlib format), rfc1951 (deflate format) and rfc1952 (gzip format)."
  },
  "README.html": {
    "href": "README.html",
    "title": "Pleosoft.XdeltaSharp | Pleosoft.XdeltaSharp - VCDIFF for .NET",
    "keywords": "Pleosoft.XdeltaSharp NOTE: At this stage, this projects can only decompress patch files. It cannot generate / compress. Pleosoft.XdeltaSharp offers the possibility to apply delta/patch files with format VCDIFF , as described in the RFC 3284 . This project offers a library and a console application written in pure C# (no calls to C libraries). Making it compatible in every OS that can run a .NET runtime that implements .NET Standard 2.0 (.NET Framework, Mono and .NET). <!-- prettier-ignore --> Release Package Stable Preview Azure Artifacts The project takes the name from xdelta . Another compression tool in C by Joshua MacDonald that implements the algorithm VCDIFF. It started as a port but due to huge difference between C and C#, dropped and restarted the development just by reading the specification. Limitations The latest version does not support: Generate patch files. Patch files with external compression. Examples Apply a patch file using var input = new FileStream(inputFile, FileMode.Open); using var patch = new FileStream(patchFile, FileMode.Open); using var output = new FileStream(outputFile, FileMode.Create); using var decoder = new Decoder(input, patch, output); decoder.ProgressChanged += progress => Console.WriteLine($\"Patching progress: {progress}\"; decoder.Run(); Documentation Feel free to ask any question in the project Discussion site! Check our on-line API documentation . Build The project requires to build .NET 6.0 SDK and .NET Framework 4.8 or latest Mono. If you open the project with VS Code and you did install the VS Code Remote Containers extension, you can have an already pre-configured development environment with Docker or Podman. To build, test and generate artifacts run: # Only required the first time dotnet tool restore # Default target is Stage-Artifacts dotnet cake To just build and test quickly, run: dotnet cake --target=BuildTest License This software is license under the MIT license. Although not used, originally the project was inspired in xdelta with license Apache 2.0 . The algorithm for the ADLER32 checksum was ported from the C version of zlib with the following license: Copyright (C) 1995-2013 Jean-loup Gailly and Mark Adler This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software. Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions: 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required. 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. 3. This notice may not be removed or altered from any source distribution. Jean-loup Gailly Mark Adler jloup@gzip.org madler@alumni.caltech.edu The data format used by the zlib library is described by RFCs (Request for Comments) 1950 to 1952 in the files http://tools.ietf.org/html/rfc1950 (zlib format), rfc1951 (deflate format) and rfc1952 (gzip format)."
  }
}